events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80 http2;
        server_name _;

        # Health check endpoint (no auth required)
        location /health {
            access_log off;
            return 200 "nginx proxy healthy\n";
            add_header Content-Type text/plain;
        }

        # Default response for root and other paths
        location / {

            
            # Same auth logic as HTTP endpoints
            set $auth_header $http_x_api_token;
            if ($auth_header = "") {
                set $auth_header $http_authorization;
            }
            
            if ($auth_header ~ "^Bearer (.+)$") {
                set $auth_header $1;
            }
            
            if ($auth_header != "${api_token}") {
                return 401;
            }
            
            # gRPC proxy settings
            grpc_pass grpc://${dgraph_service_url}:9080;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Timeouts for gRPC
            grpc_connect_timeout 60s;
            grpc_send_timeout 60s;  
            grpc_read_timeout 60s;
        }

        # Protected Dgraph endpoint - all /dgraph requests go to Dgraph service
        location /dgraph/ {
            
            # Add CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Api-Token,X-Dgraph-AuthToken";

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Api-Token,X-Dgraph-AuthToken";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
            # Check for API token in header
            set $auth_header $http_x_api_token;
            if ($auth_header = "") {
                set $auth_header $http_authorization;
            }
            
            # Remove "Bearer " prefix if present
            if ($auth_header ~ "^Bearer (.+)$") {
                set $auth_header $1;
            }

            # Check if token matches environment variable
            if ($auth_header != "${api_token}") {
                return 401 '{"error": "Unauthorized", "message": "Valid API token required in X-Api-Token header or Authorization: Bearer <token>"}';
            }



            # Strip /dgraph prefix and proxy to internal Dgraph service
            rewrite ^/dgraph/(.*)$ /$1 break;
            proxy_pass http://${dgraph_service_url}:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for subscriptions
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        location /modus/ {
            
            # Add CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Api-Token,X-Dgraph-AuthToken";

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Api-Token,X-Dgraph-AuthToken";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
            # Check for API token in header
            set $auth_header $http_x_api_token;
            if ($auth_header = "") {
                set $auth_header $http_authorization;
            }
            
            # Remove "Bearer " prefix if present
            if ($auth_header ~ "^Bearer (.+)$") {
                set $auth_header $1;
            }

            # Check if token matches environment variable
            if ($auth_header != "${api_token}") {
                return 401 '{"error": "Unauthorized", "message": "Valid API token required in X-Api-Token header or Authorization: Bearer <token>"}';
            }



            # Strip /modus prefix and proxy to internal modus service
            rewrite ^/modus/(.*)$ /$1 break;
            proxy_pass http://${modus_service_url};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for subscriptions
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

    }
}
